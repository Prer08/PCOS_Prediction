{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Function to predict using MLP model (clinical features only)\nexport const predictWithMLP = async clinicalData => {\n  try {\n    const response = await axios.post(`${API_URL}/predict_mlp`, clinicalData);\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Failed to get prediction from server');\n  }\n};\n\n// Function to predict using CNN model (image only)\nexport const predictWithCNN = async imageBase64 => {\n  try {\n    const response = await axios.post(`${API_URL}/predict_cnn`, {\n      image: imageBase64\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Failed to process image');\n  }\n};\n\n// Function to predict using Fusion model (both clinical features and image)\nexport const predictWithFusion = async (clinicalData, imageBase64) => {\n  try {\n    const response = await axios.post(`${API_URL}/predict_fusion`, {\n      clinical_data: clinicalData,\n      image: imageBase64\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response && error.response.data && error.response.data.error) {\n      throw new Error(error.response.data.error);\n    }\n    throw new Error('Failed to process fusion data');\n  }\n};\n\n// Predict PCOS based on clinical data\nexport const predictPCOS = async formData => {\n  try {\n    const response = await axios.post(`${API_URL}/predict`, formData);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API Error:', error);\n\n    // If server error includes fallback, use it\n    if (error.response && error.response.data && error.response.data.fallback_result) {\n      return {\n        ...error.response.data.fallback_result,\n        model_type: 'fallback'\n      };\n    }\n\n    // Otherwise throw the error\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to process your request. The server might be down or experiencing issues.');\n  }\n};\n\n// Predict PCOS based on ultrasound image\nexport const predictPCOSFromImage = async imageFile => {\n  try {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    const response = await axios.post(`${API_URL}/predict-image`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('API Error:', error);\n\n    // If server error includes fallback, use it\n    if (error.response && error.response.data && error.response.data.fallback_result) {\n      return {\n        ...error.response.data.fallback_result,\n        model_type: 'fallback'\n      };\n    }\n\n    // Otherwise throw the error\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to process your image. The server might be down or experiencing issues.');\n  }\n};\n\n// Check server health\nexport const checkServerHealth = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/health`);\n    return response.data.status === 'ok';\n  } catch (error) {\n    return false;\n  }\n};\n\n// Function to check the status of the models\nexport const checkModelStatus = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/model_status`);\n    return response.data;\n  } catch (error) {\n    console.error('Model status check failed:', error);\n    return {\n      mlp_model: {\n        file_exists: false,\n        pytorch_available: false,\n        fallback_available: false\n      },\n      cnn_model: {\n        file_exists: false,\n        pytorch_available: false,\n        fallback_available: false\n      },\n      fusion_model: {\n        file_exists: false,\n        pytorch_available: false,\n        fallback_available: false\n      }\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","predictWithMLP","clinicalData","response","post","data","error","Error","predictWithCNN","imageBase64","image","predictWithFusion","clinical_data","predictPCOS","formData","_error$response","_error$response$data","console","fallback_result","model_type","message","predictPCOSFromImage","imageFile","FormData","append","headers","_error$response2","_error$response2$data","checkServerHealth","get","status","checkModelStatus","mlp_model","file_exists","pytorch_available","fallback_available","cnn_model","fusion_model"],"sources":["C:/Users/Bhargavi/OneDrive/Desktop/P Major_project/pcos_detection_project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Function to predict using MLP model (clinical features only)\r\nexport const predictWithMLP = async (clinicalData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict_mlp`, clinicalData);\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw new Error('Failed to get prediction from server');\r\n  }\r\n};\r\n\r\n// Function to predict using CNN model (image only)\r\nexport const predictWithCNN = async (imageBase64) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict_cnn`, {\r\n      image: imageBase64\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw new Error('Failed to process image');\r\n  }\r\n};\r\n\r\n// Function to predict using Fusion model (both clinical features and image)\r\nexport const predictWithFusion = async (clinicalData, imageBase64) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict_fusion`, {\r\n      clinical_data: clinicalData,\r\n      image: imageBase64\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response && error.response.data && error.response.data.error) {\r\n      throw new Error(error.response.data.error);\r\n    }\r\n    throw new Error('Failed to process fusion data');\r\n  }\r\n};\r\n\r\n// Predict PCOS based on clinical data\r\nexport const predictPCOS = async (formData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict`, formData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    \r\n    // If server error includes fallback, use it\r\n    if (error.response && error.response.data && error.response.data.fallback_result) {\r\n      return {\r\n        ...error.response.data.fallback_result,\r\n        model_type: 'fallback'\r\n      };\r\n    }\r\n    \r\n    // Otherwise throw the error\r\n    throw new Error(\r\n      error.response?.data?.message || \r\n      'Failed to process your request. The server might be down or experiencing issues.'\r\n    );\r\n  }\r\n};\r\n\r\n// Predict PCOS based on ultrasound image\r\nexport const predictPCOSFromImage = async (imageFile) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append('image', imageFile);\r\n    \r\n    const response = await axios.post(`${API_URL}/predict-image`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    \r\n    // If server error includes fallback, use it\r\n    if (error.response && error.response.data && error.response.data.fallback_result) {\r\n      return {\r\n        ...error.response.data.fallback_result,\r\n        model_type: 'fallback'\r\n      };\r\n    }\r\n    \r\n    // Otherwise throw the error\r\n    throw new Error(\r\n      error.response?.data?.message || \r\n      'Failed to process your image. The server might be down or experiencing issues.'\r\n    );\r\n  }\r\n};\r\n\r\n// Check server health\r\nexport const checkServerHealth = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/health`);\r\n    return response.data.status === 'ok';\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Function to check the status of the models\r\nexport const checkModelStatus = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/model_status`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Model status check failed:', error);\r\n    return {\r\n      mlp_model: { file_exists: false, pytorch_available: false, fallback_available: false },\r\n      cnn_model: { file_exists: false, pytorch_available: false, fallback_available: false },\r\n      fusion_model: { file_exists: false, pytorch_available: false, fallback_available: false }\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}