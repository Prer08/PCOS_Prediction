{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bhargavi\\\\OneDrive\\\\Desktop\\\\P Major_project\\\\pcos_detection_project\\\\frontend\\\\src\\\\context\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check local storage for saved preference, or use system preference as default\n  const [darkMode, setDarkMode] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme === 'dark';\n    }\n    // Check system preference\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  // Update theme when darkMode state changes\n  useEffect(() => {\n    const root = window.document.documentElement;\n    if (darkMode) {\n      root.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      root.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  }, [darkMode]);\n\n  // Listen for changes in system preferences\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (!localStorage.getItem('theme')) {\n        setDarkMode(mediaQuery.matches);\n      }\n    };\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => !prevMode);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleDarkMode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"CDDKClywOYKgcGi3k9zLTsizaIg=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","darkMode","setDarkMode","savedTheme","localStorage","getItem","window","matchMedia","matches","root","document","documentElement","classList","add","setItem","remove","mediaQuery","handleChange","addEventListener","removeEventListener","toggleDarkMode","prevMode","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Bhargavi/OneDrive/Desktop/P Major_project/pcos_detection_project/frontend/src/context/ThemeContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Check local storage for saved preference, or use system preference as default\r\n  const [darkMode, setDarkMode] = useState(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme) {\r\n      return savedTheme === 'dark';\r\n    }\r\n    // Check system preference\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  });\r\n\r\n  // Update theme when darkMode state changes\r\n  useEffect(() => {\r\n    const root = window.document.documentElement;\r\n    if (darkMode) {\r\n      root.classList.add('dark');\r\n      localStorage.setItem('theme', 'dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n      localStorage.setItem('theme', 'light');\r\n    }\r\n  }, [darkMode]);\r\n\r\n  // Listen for changes in system preferences\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleChange = () => {\r\n      if (!localStorage.getItem('theme')) {\r\n        setDarkMode(mediaQuery.matches);\r\n      }\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, []);\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(prevMode => !prevMode);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,MAAM;IAC7C,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACd,OAAOA,UAAU,KAAK,MAAM;IAC9B;IACA;IACA,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;EAClE,CAAC,CAAC;;EAEF;EACAd,SAAS,CAAC,MAAM;IACd,MAAMe,IAAI,GAAGH,MAAM,CAACI,QAAQ,CAACC,eAAe;IAC5C,IAAIV,QAAQ,EAAE;MACZQ,IAAI,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC1BT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;IACvC,CAAC,MAAM;MACLL,IAAI,CAACG,SAAS,CAACG,MAAM,CAAC,MAAM,CAAC;MAC7BX,YAAY,CAACU,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC;IACxC;EACF,CAAC,EAAE,CAACb,QAAQ,CAAC,CAAC;;EAEd;EACAP,SAAS,CAAC,MAAM;IACd,MAAMsB,UAAU,GAAGV,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC;IACpE,MAAMU,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI,CAACb,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;QAClCH,WAAW,CAACc,UAAU,CAACR,OAAO,CAAC;MACjC;IACF,CAAC;IAEDQ,UAAU,CAACE,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;IACnD,OAAO,MAAMD,UAAU,CAACG,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;EACrE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3BlB,WAAW,CAACmB,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACpC,CAAC;EAED,oBACEzB,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,QAAQ;MAAEmB;IAAe,CAAE;IAAArB,QAAA,EACxDA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC3B,EAAA,CA7CWF,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}