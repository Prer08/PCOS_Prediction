{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000';\n\n// Function to predict using MLP model (clinical features only)\nexport const predictWithMLP = async clinicalData => {\n  try {\n    const response = await axios.post(`${API_URL}/predict_mlp`, clinicalData);\n    return response.data;\n  } catch (error) {\n    console.error('Error predicting with MLP:', error);\n    throw error;\n  }\n};\n\n// Function to predict using CNN model (image only)\nexport const predictWithCNN = async imageBase64 => {\n  try {\n    const response = await axios.post(`${API_URL}/predict_cnn`, {\n      image: imageBase64\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error predicting with CNN:', error);\n    throw error;\n  }\n};\n\n// Function to predict using Fusion model (both clinical features and image)\nexport const predictWithFusion = async (clinicalData, imageBase64) => {\n  try {\n    const response = await axios.post(`${API_URL}/predict_fusion`, {\n      clinical_data: clinicalData,\n      image: imageBase64\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error predicting with Fusion model:', error);\n    throw error;\n  }\n};\n\n// Function to check if the backend server is running\nexport const checkServerHealth = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/health`);\n    return response.data.status === 'healthy';\n  } catch (error) {\n    console.error('Server health check failed:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","API_URL","predictWithMLP","clinicalData","response","post","data","error","console","predictWithCNN","imageBase64","image","predictWithFusion","clinical_data","checkServerHealth","get","status"],"sources":["C:/Users/Bhargavi/OneDrive/Desktop/P Major_project/pcos_detection_project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000';\r\n\r\n// Function to predict using MLP model (clinical features only)\r\nexport const predictWithMLP = async (clinicalData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict_mlp`, clinicalData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error predicting with MLP:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to predict using CNN model (image only)\r\nexport const predictWithCNN = async (imageBase64) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict_cnn`, {\r\n      image: imageBase64\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error predicting with CNN:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to predict using Fusion model (both clinical features and image)\r\nexport const predictWithFusion = async (clinicalData, imageBase64) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/predict_fusion`, {\r\n      clinical_data: clinicalData,\r\n      image: imageBase64\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error predicting with Fusion model:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Function to check if the backend server is running\r\nexport const checkServerHealth = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/health`);\r\n    return response.data.status === 'healthy';\r\n  } catch (error) {\r\n    console.error('Server health check failed:', error);\r\n    return false;\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,cAAc,EAAEE,YAAY,CAAC;IACzE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAOC,WAAW,IAAK;EACnD,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,cAAc,EAAE;MAC1DU,KAAK,EAAED;IACT,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOT,YAAY,EAAEO,WAAW,KAAK;EACpE,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,OAAO,iBAAiB,EAAE;MAC7DY,aAAa,EAAEV,YAAY;MAC3BQ,KAAK,EAAED;IACT,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMJ,KAAK,CAACe,GAAG,CAAC,GAAGd,OAAO,SAAS,CAAC;IACrD,OAAOG,QAAQ,CAACE,IAAI,CAACU,MAAM,KAAK,SAAS;EAC3C,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}